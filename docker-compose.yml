version: '3.8'

services:
  bot:
    build: .
    container_name: telegram_bot
    restart: always
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - bot_network

  postgres:
    image: postgres:15-alpine
    container_name: bot_postgres
    restart: always
    environment:
      POSTGRES_DB: telegram_bot
      POSTGRES_USER: ${DB_USER:-botuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-botpass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - bot_network

  redis:
    image: redis:7-alpine
    container_name: bot_redis
    restart: always
    command: ["redis-server", "--appendonly", "yes", "--save", "60", "1000"]
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - bot_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.0
    container_name: bot_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
      - cluster.routing.allocation.disk.watermark.low=95%
      - cluster.routing.allocation.disk.watermark.high=97%
      - cluster.routing.allocation.disk.watermark.flood_stage=99%
      - cluster.info.update.interval=1m
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'"]
      interval: 10s
      timeout: 10s
      retries: 10
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - bot_network

  pgadmin:
    image: dpage/pgadmin4
    container_name: bot_pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - bot_network

volumes:
  postgres_data:
  es_data:
  redis_data:

networks:
  bot_network:
    driver: bridge
