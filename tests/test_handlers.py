import pytest
from unittest.mock import AsyncMock, MagicMock
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, User as TelegramUser

from handlers.start import cmd_start, select_supplier_role
from states.supplier import SupplierRegistration

@pytest.mark.asyncio
async def test_cmd_start_new_user():
    """ØªØ³Øª Ø¯Ø³ØªÙˆØ± start Ø¨Ø±Ø§ÛŒ Ú©Ø§Ø±Ø¨Ø± Ø¬Ø¯ÛŒØ¯"""
    # Mock objects
    message = AsyncMock(spec=Message)
    message.from_user = MagicMock(spec=TelegramUser)
    message.from_user.id = 123456789
    message.from_user.full_name = "Test User"
    
    state = AsyncMock(spec=FSMContext)
    session = AsyncMock()
    
    # Mock database query
    session.execute.return_value.scalar_one_or_none.return_value = None
    
    # Call handler
    await cmd_start(message, state, session)
    
    # Assertions
    state.clear.assert_called_once()
    message.answer.assert_called_once()
    assert "Ø®ÙˆØ´ Ø¢Ù…Ø¯ÛŒØ¯" in message.answer.call_args[0][0]

@pytest.mark.asyncio
async def test_select_supplier_role_new():
    """ØªØ³Øª Ø§Ù†ØªØ®Ø§Ø¨ Ù†Ù‚Ø´ ØªØ£Ù…ÛŒÙ†â€ŒÚ©Ù†Ù†Ø¯Ù‡ Ø¨Ø±Ø§ÛŒ Ú©Ø§Ø±Ø¨Ø± Ø¬Ø¯ÛŒØ¯"""
    # Mock objects
    message = AsyncMock(spec=Message)
    message.from_user = MagicMock(spec=TelegramUser)
    message.from_user.id = 123456789
    message.text = "ðŸŽ­ ØªØ£Ù…ÛŒÙ†â€ŒÚ©Ù†Ù†Ø¯Ù‡"
    
    state = AsyncMock(spec=FSMContext)
    session = AsyncMock()
    
    # Mock database query
    session.execute.return_value.scalar_one_or_none.return_value = None
    
    # Call handler
    await select_supplier_role(message, state, session)
    
    # Assertions
    message.answer.assert_called_once()
    assert "Ù†Ø§Ù… Ùˆ Ù†Ø§Ù… Ø®Ø§Ù†ÙˆØ§Ø¯Ú¯ÛŒ" in message.answer.call_args[0][0]
    state.set_state.assert_called_with(SupplierRegistration.full_name)
