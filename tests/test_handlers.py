import pytest
from unittest.mock import AsyncMock, MagicMock
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, User as TelegramUser

from handlers.start import cmd_start, select_supplier_role
from handlers.demander import _parse_notes_for_search, _validate_notes_input
from states.supplier import SupplierRegistration

@pytest.mark.asyncio
async def test_cmd_start_new_user():
    """ØªØ³Øª Ø¯Ø³ØªÙˆØ± start Ø¨Ø±Ø§ÛŒ Ú©Ø§Ø±Ø¨Ø± Ø¬Ø¯ÛŒØ¯"""
    # Mock objects
    message = AsyncMock(spec=Message)
    message.from_user = MagicMock(spec=TelegramUser)
    message.from_user.id = 123456789
    message.from_user.full_name = "Test User"
    
    state = AsyncMock(spec=FSMContext)
    session = AsyncMock()
    
    # Mock database query
    session.execute.return_value.scalar_one_or_none.return_value = None
    
    # Call handler
    await cmd_start(message, state, session)
    
    # Assertions
    state.clear.assert_called_once()
    message.answer.assert_called_once()
    assert "Ø®ÙˆØ´ Ø¢Ù…Ø¯ÛŒØ¯" in message.answer.call_args[0][0]

@pytest.mark.asyncio
async def test_select_supplier_role_new():
    """ØªØ³Øª Ø§Ù†ØªØ®Ø§Ø¨ Ù†Ù‚Ø´ ØªØ£Ù…ÛŒÙ†â€ŒÚ©Ù†Ù†Ø¯Ù‡ Ø¨Ø±Ø§ÛŒ Ú©Ø§Ø±Ø¨Ø± Ø¬Ø¯ÛŒØ¯"""
    # Mock objects
    message = AsyncMock(spec=Message)
    message.from_user = MagicMock(spec=TelegramUser)
    message.from_user.id = 123456789
    message.text = "ðŸŽ­ ØªØ£Ù…ÛŒÙ†â€ŒÚ©Ù†Ù†Ø¯Ù‡"
    
    state = AsyncMock(spec=FSMContext)
    session = AsyncMock()
    
    # Mock database query
    session.execute.return_value.scalar_one_or_none.return_value = None
    
    # Call handler
    await select_supplier_role(message, state, session)
    
    # Assertions
    message.answer.assert_called_once()
    assert "Ù†Ø§Ù… Ùˆ Ù†Ø§Ù… Ø®Ø§Ù†ÙˆØ§Ø¯Ú¯ÛŒ" in message.answer.call_args[0][0]
    state.set_state.assert_called_with(SupplierRegistration.full_name)


def test_parse_notes_for_search():
    """ØªØ³Øª ØªØ§Ø¨Ø¹ Ù¾Ø§Ø±Ø³ Ú©Ø±Ø¯Ù† ÛŒØ§Ø¯Ø¯Ø§Ø´Øªâ€ŒÙ‡Ø§ Ø¨Ø±Ø§ÛŒ Ø¬Ø³Øªâ€ŒØ¬Ùˆ"""
    
    # Test normal case with multiple terms
    result = _parse_notes_for_search("Ø¨Ù„Ù†Ø¯ - Ù…ÙˆÛŒ Ø¨ÙˆØ± - Ø®ÙˆØ´Ú¯Ù„")
    assert result == ["Ø¨Ù„Ù†Ø¯", "Ù…ÙˆÛŒ Ø¨ÙˆØ±", "Ø®ÙˆØ´Ú¯Ù„"]
    
    # Test single term
    result = _parse_notes_for_search("Ø¨Ù„Ù†Ø¯")
    assert result == ["Ø¨Ù„Ù†Ø¯"]
    
    # Test with extra spaces
    result = _parse_notes_for_search("  Ø¨Ù„Ù†Ø¯  -  Ù…ÙˆÛŒ Ø¨ÙˆØ±  -  Ø®ÙˆØ´Ú¯Ù„  ")
    assert result == ["Ø¨Ù„Ù†Ø¯", "Ù…ÙˆÛŒ Ø¨ÙˆØ±", "Ø®ÙˆØ´Ú¯Ù„"]
    
    # Test empty string
    result = _parse_notes_for_search("")
    assert result == []
    
    # Test None
    result = _parse_notes_for_search(None)
    assert result == []
    
    # Test only spaces and dashes
    result = _parse_notes_for_search("  -  -  ")
    assert result == []
    
    # Test with empty terms between dashes
    result = _parse_notes_for_search("Ø¨Ù„Ù†Ø¯ - - Ù…ÙˆÛŒ Ø¨ÙˆØ±")
    assert result == ["Ø¨Ù„Ù†Ø¯", "Ù…ÙˆÛŒ Ø¨ÙˆØ±"]


def test_validate_notes_input():
    """ØªØ³Øª ØªØ§Ø¨Ø¹ Ø§Ø¹ØªØ¨Ø§Ø±Ø³Ù†Ø¬ÛŒ ÙˆØ±ÙˆØ¯ÛŒ ÛŒØ§Ø¯Ø¯Ø§Ø´Øªâ€ŒÙ‡Ø§"""
    
    # Test valid inputs
    is_valid, msg = _validate_notes_input("Ø¨Ù„Ù†Ø¯ - Ù…ÙˆÛŒ Ø¨ÙˆØ± - Ø®ÙˆØ´Ú¯Ù„")
    assert is_valid is True
    assert msg == ""
    
    # Test empty input (should be valid)
    is_valid, msg = _validate_notes_input("")
    assert is_valid is True
    assert msg == ""
    
    # Test None input (should be valid)
    is_valid, msg = _validate_notes_input(None)
    assert is_valid is True
    assert msg == ""
    
    # Test single term
    is_valid, msg = _validate_notes_input("Ø¨Ù„Ù†Ø¯")
    assert is_valid is True
    assert msg == ""
    
    # Test too long input
    long_text = "a" * 501
    is_valid, msg = _validate_notes_input(long_text)
    assert is_valid is False
    assert "Ø·ÙˆÙ„Ø§Ù†ÛŒ" in msg
    
    # Test too many terms
    many_terms = " - ".join(["term"] * 11)
    is_valid, msg = _validate_notes_input(many_terms)
    assert is_valid is False
    assert "ØªØ¹Ø¯Ø§Ø¯ Ø¹Ø¨Ø§Ø±Ø§Øª" in msg
    
    # Test term too long
    is_valid, msg = _validate_notes_input("a" * 51)
    assert is_valid is False
    assert "Ø·ÙˆÙ„Ø§Ù†ÛŒ" in msg
    
    # Test term too short
    is_valid, msg = _validate_notes_input("a")
    assert is_valid is False
    assert "Ú©ÙˆØªØ§Ù‡" in msg
    
    # Test mixed valid and invalid terms
    is_valid, msg = _validate_notes_input("Ø¨Ù„Ù†Ø¯ - a")
    assert is_valid is False
    assert "Ú©ÙˆØªØ§Ù‡" in msg
